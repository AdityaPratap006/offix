/*! For license information please see 176c9420.90abaf34.js.LICENSE.txt */
(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{138:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return d}));var r=n(0),o=n.n(r);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=o.a.createContext({}),l=function(e){var t=o.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},p=function(e){var t=l(e.components);return o.a.createElement(s.Provider,{value:t},e.children)},f={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},b=o.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,a=e.parentName,s=u(e,["components","mdxType","originalType","parentName"]),p=l(n),b=r,d=p["".concat(a,".").concat(b)]||p[b]||f[b]||i;return n?o.a.createElement(d,c(c({ref:t},s),{},{components:n})):o.a.createElement(d,c({ref:t},s))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=b;var c={};for(var u in t)hasOwnProperty.call(t,u)&&(c[u]=t[u]);c.originalType=e,c.mdxType="string"==typeof e?e:r,a[1]=c;for(var s=2;s<i;s++)a[s]=n[s];return o.a.createElement.apply(null,a)}return o.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},139:function(e,t,n){"use strict";e.exports=n(140)},140:function(e,t,n){"use strict";var r=n(141),o="function"==typeof Symbol&&Symbol.for,i=o?Symbol.for("react.element"):60103,a=o?Symbol.for("react.portal"):60106,c=o?Symbol.for("react.fragment"):60107,u=o?Symbol.for("react.strict_mode"):60108,s=o?Symbol.for("react.profiler"):60114,l=o?Symbol.for("react.provider"):60109,p=o?Symbol.for("react.context"):60110,f=o?Symbol.for("react.forward_ref"):60112,b=o?Symbol.for("react.suspense"):60113,d=o?Symbol.for("react.memo"):60115,h=o?Symbol.for("react.lazy"):60116,m="function"==typeof Symbol&&Symbol.iterator;function y(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var O={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},j={};function v(e,t,n){this.props=e,this.context=t,this.refs=j,this.updater=n||O}function g(){}function T(e,t,n){this.props=e,this.context=t,this.refs=j,this.updater=n||O}v.prototype.isReactComponent={},v.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(y(85));this.updater.enqueueSetState(this,e,t,"setState")},v.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},g.prototype=v.prototype;var w=T.prototype=new g;w.constructor=T,r(w,v.prototype),w.isPureReactComponent=!0;var C={current:null},S=Object.prototype.hasOwnProperty,x={key:!0,ref:!0,__self:!0,__source:!0};function N(e,t,n){var r,o={},a=null,c=null;if(null!=t)for(r in void 0!==t.ref&&(c=t.ref),void 0!==t.key&&(a=""+t.key),t)S.call(t,r)&&!x.hasOwnProperty(r)&&(o[r]=t[r]);var u=arguments.length-2;if(1===u)o.children=n;else if(1<u){for(var s=Array(u),l=0;l<u;l++)s[l]=arguments[l+2];o.children=s}if(e&&e.defaultProps)for(r in u=e.defaultProps)void 0===o[r]&&(o[r]=u[r]);return{$$typeof:i,type:e,key:a,ref:c,props:o,_owner:C.current}}function _(e){return"object"==typeof e&&null!==e&&e.$$typeof===i}var E=/\/+/g,A=[];function k(e,t,n,r){if(A.length){var o=A.pop();return o.result=e,o.keyPrefix=t,o.func=n,o.context=r,o.count=0,o}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function P(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>A.length&&A.push(e)}function D(e,t,n){return null==e?0:function e(t,n,r,o){var c=typeof t;"undefined"!==c&&"boolean"!==c||(t=null);var u=!1;if(null===t)u=!0;else switch(c){case"string":case"number":u=!0;break;case"object":switch(t.$$typeof){case i:case a:u=!0}}if(u)return r(o,t,""===n?"."+R(t,0):n),1;if(u=0,n=""===n?".":n+":",Array.isArray(t))for(var s=0;s<t.length;s++){var l=n+R(c=t[s],s);u+=e(c,l,r,o)}else if(null===t||"object"!=typeof t?l=null:l="function"==typeof(l=m&&t[m]||t["@@iterator"])?l:null,"function"==typeof l)for(t=l.call(t),s=0;!(c=t.next()).done;)u+=e(c=c.value,l=n+R(c,s++),r,o);else if("object"===c)throw r=""+t,Error(y(31,"[object Object]"===r?"object with keys {"+Object.keys(t).join(", ")+"}":r,""));return u}(e,"",t,n)}function R(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,(function(e){return t[e]}))}(e.key):t.toString(36)}function q(e,t){e.func.call(e.context,t,e.count++)}function M(e,t,n){var r=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?I(e,r,n,(function(e){return e})):null!=e&&(_(e)&&(e=function(e,t){return{$$typeof:i,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(E,"$&/")+"/")+n)),r.push(e))}function I(e,t,n,r,o){var i="";null!=n&&(i=(""+n).replace(E,"$&/")+"/"),D(e,M,t=k(t,i,r,o)),P(t)}var U={current:null};function $(){var e=U.current;if(null===e)throw Error(y(321));return e}var K={ReactCurrentDispatcher:U,ReactCurrentBatchConfig:{suspense:null},ReactCurrentOwner:C,IsSomeRendererActing:{current:!1},assign:r};t.Children={map:function(e,t,n){if(null==e)return e;var r=[];return I(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;D(e,q,t=k(null,null,t,n)),P(t)},count:function(e){return D(e,(function(){return null}),null)},toArray:function(e){var t=[];return I(e,t,null,(function(e){return e})),t},only:function(e){if(!_(e))throw Error(y(143));return e}},t.Component=v,t.Fragment=c,t.Profiler=s,t.PureComponent=T,t.StrictMode=u,t.Suspense=b,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=K,t.cloneElement=function(e,t,n){if(null==e)throw Error(y(267,e));var o=r({},e.props),a=e.key,c=e.ref,u=e._owner;if(null!=t){if(void 0!==t.ref&&(c=t.ref,u=C.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var s=e.type.defaultProps;for(l in t)S.call(t,l)&&!x.hasOwnProperty(l)&&(o[l]=void 0===t[l]&&void 0!==s?s[l]:t[l])}var l=arguments.length-2;if(1===l)o.children=n;else if(1<l){s=Array(l);for(var p=0;p<l;p++)s[p]=arguments[p+2];o.children=s}return{$$typeof:i,type:e.type,key:a,ref:c,props:o,_owner:u}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:p,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:l,_context:e},e.Consumer=e},t.createElement=N,t.createFactory=function(e){var t=N.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:f,render:e}},t.isValidElement=_,t.lazy=function(e){return{$$typeof:h,_ctor:e,_status:-1,_result:null}},t.memo=function(e,t){return{$$typeof:d,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return $().useCallback(e,t)},t.useContext=function(e,t){return $().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return $().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return $().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return $().useLayoutEffect(e,t)},t.useMemo=function(e,t){return $().useMemo(e,t)},t.useReducer=function(e,t,n){return $().useReducer(e,t,n)},t.useRef=function(e){return $().useRef(e)},t.useState=function(e){return $().useState(e)},t.version="16.13.1"},141:function(e,t,n){"use strict";var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;function a(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(o){return!1}}()?Object.assign:function(e,t){for(var n,c,u=a(e),s=1;s<arguments.length;s++){for(var l in n=Object(arguments[s]))o.call(n,l)&&(u[l]=n[l]);if(r){c=r(n);for(var p=0;p<c.length;p++)i.call(n,c[p])&&(u[c[p]]=n[c[p]])}}return u}},60:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return a})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return u})),n.d(t,"default",(function(){return l}));var r=n(2),o=n(6),i=(n(139),n(138)),a={id:"offix-cache",title:"Offix Cache",sidebar_label:"Client Cache"},c={unversionedId:"offix/offix-cache",id:"offix/offix-cache",isDocsHomePage:!1,title:"Offix Cache",description:"The offix-cache package helps developers to manage some of their client's state such as cache, optimistic responses and subscriptions.",source:"@site/../docs/offix/ref-cache.md",permalink:"/docs/next/offix/offix-cache",editUrl:"https://github.com/aerogear/offix/edit/master/website/../docs/offix/ref-cache.md",version:"next",sidebar_label:"Client Cache",sidebar:"docs",previous:{title:"Offline Support",permalink:"/docs/next/offix/offline-client"},next:{title:"Client Side Conflict Resolution",permalink:"/docs/next/offix/conflict-client"}},u=[{value:"Optimistic UI",id:"optimistic-ui",children:[]},{value:"Mutation Cache Helpers",id:"mutation-cache-helpers",children:[{value:"Pagination and relationships",id:"pagination-and-relationships",children:[]}]},{value:"Subscription Helpers",id:"subscription-helpers",children:[{value:"Pagination and relationships",id:"pagination-and-relationships-1",children:[]},{value:"Multiple Subscriptions",id:"multiple-subscriptions",children:[]}]}],s={rightToc:u};function l(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"offix-cache")," package helps developers to manage some of their client's state such as cache, optimistic responses and subscriptions."),Object(i.b)("p",null,"Offix Cache capabilities are available automatically when using ",Object(i.b)("inlineCode",{parentName:"p"},"client.offlineMutate"),"."),Object(i.b)("h2",{id:"optimistic-ui"},"Optimistic UI"),Object(i.b)("p",null,"In Apollo Client, mutation results are not applied to the UI until responses are received from the server. To provide a better user experience, an application may want to update the UI immediately. ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-mutation-options-optimisticResponse",title:"Optimistic Responses"}),"Optimistic Responses")," are an easy to way to achieve this goal. However, creating individual optimistic responses for each mutation in your application can introduce boilerplate code. offix-cache can automatically create optimistic responses for you to reduce this boilerplate."),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"createOptimisticResponse")," function returns an object which can be passed directly to Apollo Client's mutate function. ",Object(i.b)("inlineCode",{parentName:"p"},"createOptimisticResponse")," will help to build expected response object from input arguments.\nif your mutation returns different values you will still need to build it manually."),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-javascript"}),"import { createOptimisticResponse } from 'offix-cache';\n\nconst optimisticResponse = createOptimisticResponse({\n  mutation: ADD_TASK,\n  variables: { some_key: 'some_value' },\n  operationType: 'add',\n  returnType: 'Task',\n  idField: 'id'\n});\n\napolloClient.mutate({\n  mutation: ADD_TASK,\n  optimisticResponse: optimisticResponse\n});\n")),Object(i.b)("h2",{id:"mutation-cache-helpers"},"Mutation Cache Helpers"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"offix-cache")," provides a mechanism to automatically update the client cache based on the result returned by a mutation. The ",Object(i.b)("inlineCode",{parentName:"p"},"createMutationOptions")," function returns a ",Object(i.b)("inlineCode",{parentName:"p"},"MutationOptions")," object compatible with Apollo Client's mutate."),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-javascript"}),"const { createMutationOptions, CacheOperation } = require('offix-cache');\n\nconst mutationOptions = {\n  mutation: ADD_TASK,\n  variables: {\n    title: 'item title'\n  },\n  updateQuery: {\n    query: GET_TASKS,\n    variables: {\n      filterBy: 'some filter'\n    }\n  },\n  returnType: 'Task',\n  operationType: CacheOperation.ADD,\n  idField: 'id'\n};\n")),Object(i.b)("p",null,"We can also provide more than one query to update in the cache by providing an array to the ",Object(i.b)("inlineCode",{parentName:"p"},"updateQuery")," parameter:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-javascript"}),"const mutationOptions = {\n  ...\n  updateQuery: [\n    { query: GET_TASKS, variables: {} }\n  ],\n  ...\n};\n")),Object(i.b)("p",null,"Where ",Object(i.b)("inlineCode",{parentName:"p"},"mutationOptions")," is either of the two objects shown above, we can then pass this object to our mutate function."),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-javascript"}),"const options = createMutationOptions(mutationOptions);\n\napolloClient.mutate(options);\n")),Object(i.b)("h3",{id:"pagination-and-relationships"},"Pagination and relationships"),Object(i.b)("p",null,"Offix by default assumes that the object returned by mutations contains just your data. In situations when you need to wrap your data into some container to provide pagination and other information, Offix will require an additional parameter. For example when the API returns TaskPage etc. the actual data might be returned over ",Object(i.b)("inlineCode",{parentName:"p"},"items"),"."),Object(i.b)("p",null,"When this query is cached, it may be necessary to update a field within the query and not the entire query, for example with relationships. In order to do this, it is necessary to provide the name of the field being updated with the ",Object(i.b)("inlineCode",{parentName:"p"},"returnField")," parameter."),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-javascript"}),"const mutationOptions = {\n  mutation: ADD_COMMENT,\n  variables: {\n    title: 'comment title'\n  },\n  updateQuery: {\n    query: GET_TASK,\n    variables: {\n      filterBy: 'some filter'\n    }\n  },\n  returnType: 'Comment',\n  operationType: CacheOperation.ADD,\n  idField: 'id',\n  returnField: 'comments\n};\n")),Object(i.b)("h2",{id:"subscription-helpers"},"Subscription Helpers"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"offix-cache")," provides a subscription cache update method helper which can generate the necessary options to be used with Apollo Client's ",Object(i.b)("inlineCode",{parentName:"p"},"subscribeToMore")," function."),Object(i.b)("p",null,"To use this helper, we first need to create some options. These options should take the folowing form:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-javascript"}),"const { CacheOperation } = require('offix-cache');\n\nconst options = {\n  subscriptionQuery: TASK_ADDED_SUBSCRIPTION,\n  cacheUpdateQuery: GET_TASKS,\n  operationType: CacheOperation.ADD\n};\n")),Object(i.b)("p",null,"This options object will be used to inform the subscription helper that for every data object received because of the ",Object(i.b)("inlineCode",{parentName:"p"},"TASK_ADDED_SUBSCRIPTION")," the ",Object(i.b)("inlineCode",{parentName:"p"},"GET_TASKS")," query should also be kept up to date in the cache."),Object(i.b)("p",null,"We can then create the required cache update functions in the following way:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-javascript"}),"const { createSubscriptionOptions } = require('offix-cache');\n\nconst subscriptionOptions = createSubscriptionOptions(options);\n")),Object(i.b)("p",null,"To use this helper we then pass this ",Object(i.b)("inlineCode",{parentName:"p"},"subscriptionOptions")," variable to the ",Object(i.b)("inlineCode",{parentName:"p"},"subscribeToMore")," function of our ",Object(i.b)("inlineCode",{parentName:"p"},"ObservableQuery"),"."),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-javascript"}),"const query =\n  apolloClient.watchQuery <\n  AllTasks >\n  {\n    query: GET_TASKS\n  };\n\nquery.subscribeToMore(subscriptionOptions);\n")),Object(i.b)("p",null,"The cache will now be kept up to date with automatic data deduplication being performed."),Object(i.b)("h3",{id:"pagination-and-relationships-1"},"Pagination and relationships"),Object(i.b)("p",null,"Similarly to the mutation cache update helpers, it is necessary to provide the ",Object(i.b)("inlineCode",{parentName:"p"},"returnField")," parameter to specify the name of the field to update within the query."),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-javascript"}),"export const editSubscriptionOptions = createSubscriptionOptions({\n  subscriptionQuery: NEW_COMMENT,\n  cacheUpdateQuery: GET_TASK,\n  operationType: CacheOperation.ADD,\n  idField: 'id',\n  returnField: 'comments'\n});\n")),Object(i.b)("h3",{id:"multiple-subscriptions"},"Multiple Subscriptions"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"offix-cache")," also provides the ability to automatically call ",Object(i.b)("inlineCode",{parentName:"p"},"subscribeToMore")," on your ",Object(i.b)("inlineCode",{parentName:"p"},"ObservableQuery"),". This can be useful in a situation where you may have multiple subscriptions which can affect one single query. For example, if you have a ",Object(i.b)("inlineCode",{parentName:"p"},"TaskAdded"),", ",Object(i.b)("inlineCode",{parentName:"p"},"TaskDeleted")," and a ",Object(i.b)("inlineCode",{parentName:"p"},"TaskUpdated")," subscription you would need three separate ",Object(i.b)("inlineCode",{parentName:"p"},"subscribeToMore")," function calls. This can become tedious as your number of subscriptions grow. To combat this, we can use the ",Object(i.b)("inlineCode",{parentName:"p"},"subscribeToMoreHelper")," function from offix-cache to automatically handle this for us by passing it an array of subscriptions and their corresponding queries which need to be updated."),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-javascript"}),"const { CacheOperation } = require('offix-cache');\n\nconst addOptions = {\n  subscriptionQuery: TASK_ADDED_SUBSCRIPTION,\n  cacheUpdateQuery: GET_TASKS,\n  operationType: CacheOperation.ADD\n};\n\nconst deleteOptions = {\n  subscriptionQuery: TASK_DELETED_SUBSCRIPTION,\n  cacheUpdateQuery: GET_TASKS,\n  operationType: CacheOperation.DELETE\n};\n\nconst updateOptions = {\n  subscriptionQuery: TASK_UPDATED_SUBSCRIPTION,\n  cacheUpdateQuery: GET_TASKS,\n  operationType: CacheOperation.REFRESH\n};\n\nconst query =\n  client.watchQuery <\n  AllTasks >\n  {\n    query: GET_TASKS\n  };\n\nsubscribeToMoreHelper(query, [addOptions, deleteOptions, updateOptions]);\n")))}l.isMDXComponent=!0}}]);