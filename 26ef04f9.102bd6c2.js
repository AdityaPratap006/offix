(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{134:function(e,t,a){"use strict";a.d(t,"a",(function(){return p})),a.d(t,"b",(function(){return f}));var n=a(0),r=a.n(n);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function c(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=r.a.createContext({}),d=function(e){var t=r.a.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):c(c({},t),e)),a},p=function(e){var t=d(e.components);return r.a.createElement(l.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,i=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=d(a),u=n,f=p["".concat(i,".").concat(u)]||p[u]||b[u]||o;return a?r.a.createElement(f,c(c({ref:t},l),{},{components:a})):r.a.createElement(f,c({ref:t},l))}));function f(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,i=new Array(o);i[0]=u;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:n,i[1]=c;for(var l=2;l<o;l++)i[l]=a[l];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,a)}u.displayName="MDXCreateElement"},76:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return i})),a.d(t,"metadata",(function(){return c})),a.d(t,"rightToc",(function(){return s})),a.d(t,"default",(function(){return d}));var n=a(2),r=a(6),o=(a(0),a(134)),i={id:"getting-started",title:"Getting Started",sidebar_label:"Getting Started"},c={unversionedId:"datastore/getting-started",id:"datastore/getting-started",isDocsHomePage:!1,title:"Getting Started",description:"Installing Offix DataStore",source:"@site/../docs/datastore/ref-getting-started.md",permalink:"/docs/next/datastore/getting-started",editUrl:"https://github.com/aerogear/offix/edit/master/website/../docs/datastore/ref-getting-started.md",version:"next",sidebar_label:"Getting Started",sidebar:"docs",previous:{title:"Introduction to Offix Datastore",permalink:"/docs/next/datastore/introduction"},next:{title:"Offix Datastore Concepts",permalink:"/docs/next/datastore/concepts"}},s=[{value:"Installing Offix DataStore",id:"installing-offix-datastore",children:[]},{value:"Using DataStore",id:"using-datastore",children:[{value:"Building your own GraphQL type",id:"building-your-own-graphql-type",children:[]},{value:"Configuring Datastore",id:"configuring-datastore",children:[]},{value:"Datastore Models",id:"datastore-models",children:[]}]},{value:"Schema Upgrades",id:"schema-upgrades",children:[]}],l={rightToc:s};function d(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(n.a)({},l,a,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"installing-offix-datastore"},"Installing Offix DataStore"),Object(o.b)("p",null,"Using ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.npmjs.com/package/offix-datastore"}),"npm"),":"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-shell"}),"npm install offix-datastore\n")),Object(o.b)("p",null,"Or ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"https://yarnpkg.com/en/package/offix-datastore"}),"yarn"),":"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-shell"}),"yarn add offix-datastore\n")),Object(o.b)("h2",{id:"using-datastore"},"Using DataStore"),Object(o.b)("h3",{id:"building-your-own-graphql-type"},"Building your own GraphQL type"),Object(o.b)("p",null,"Let's use the following sample schema for our app"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{}),"type Task {\n    id: ID!\n    title: String\n    description: String\n    numberOfDaysLeft: Number\n}\n")),Object(o.b)("h3",{id:"configuring-datastore"},"Configuring Datastore"),Object(o.b)("p",null,"We have a ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/next/datastore/cli"}),"cli tool")," that generates DataStore config and Model JSON schema given a GraphQL schema."),Object(o.b)("h3",{id:"datastore-models"},"Datastore Models"),Object(o.b)("p",null,"To be able to store user tasks in the DataStore, you need to create it's DataStore model.\nThe DataStore model provides the API to perform CRUD operations on ",Object(o.b)("inlineCode",{parentName:"p"},"Task")," in the DataStore.\nThe ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/next/datastore/cli"}),"cli tool")," generates code to configure each model defined in your graphql schema.\nHere we will assume that you generated the DataStore config files in ",Object(o.b)("inlineCode",{parentName:"p"},"src/datastore"),"."),Object(o.b)("p",null,"If you are using Typescript and you want your model to have types, you can create an interface:"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript",metastring:'title="/src/datastore/types.ts"',title:'"/src/datastore/types.ts"'}),"export interface Task {\n    id?: string;\n    title: string;\n    description: string;\n    numberOfDaysLeft: number;\n}\n")),Object(o.b)("p",null,"and instantiate the ",Object(o.b)("inlineCode",{parentName:"p"},"TaskModel")," with the ",Object(o.b)("inlineCode",{parentName:"p"},"Task")," interface in the generated config file."),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'import { DataStore } from "offix-datastore";\nimport schema from "./schema";\nimport { Task } from "./types";\n\nconst datastore = new DataStore({\n  dbName: "offix-datastore",\n  replicationConfig: {\n    client: {\n      url: "http://localhost:4000/graphql",\n      wsUrl: "ws://localhost:4000/graphql",\n    }\n  }\n});\n\nexport const TaskModel = datastore.setupModel<Task>(schema.Task);\n\ndatastore.init();\n')),Object(o.b)("h2",{id:"schema-upgrades"},"Schema Upgrades"),Object(o.b)("p",null,"The DataStore creates a table on the device for each model.\nWhen you push a new version of your app with models added, replaced or removed,\nthe tables for the new models won't be created on the client device and the unused tables(for removed models)\nwon't be deleted."),Object(o.b)("p",null,"To make the DataStore acknowledge these changes, you need to increment the schema version."),Object(o.b)("p",null,"Using our sample app, suppose we add a ",Object(o.b)("inlineCode",{parentName:"p"},"SubTask"),' model, we need to increment\nthe schema version to trigger the creation of the "user_SubTask" table on the client device.'),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"DataStore")," constructor takes a schema version parameter (defaults to 1). "),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"const dataStore = new DataStore({\n  ...,\n  schemaVersion: 2\n});\n")))}d.isMDXComponent=!0}}]);