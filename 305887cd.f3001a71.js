(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{196:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return p}));var o=n(1),r=n(11),a=(n(0),n(288)),i={id:"client-configuration",title:"Client Configuration",sidebar_label:"Client Configuration"},c={id:"version-0.13.0/client-configuration",title:"Client Configuration",description:"## offix-client",source:"@site/versioned_docs/version-0.13.0/ref-configuration.md",permalink:"/docs/0.13.0/client-configuration",editUrl:"https://github.com/aerogear/graphback/edit/master/website/versioned_docs/version-0.13.0/ref-configuration.md",version:"0.13.0",sidebar_label:"Client Configuration",sidebar:"version-0.13.0/docs",previous:{title:"Getting Started",permalink:"/docs/0.13.0/getting-started"},next:{title:"Offline Support",permalink:"/docs/0.13.0/offline-client"}},l=[{value:"offix-client",id:"offix-client",children:[{value:"<code>ApolloOfflineClient</code>",id:"apolloofflineclient",children:[]}]},{value:"offix-client-boost",id:"offix-client-boost",children:[{value:"<code>createClient</code>",id:"createclient",children:[]}]}],s={rightToc:l};function p(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(a.b)("wrapper",Object(o.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h2",{id:"offix-client"},"offix-client"),Object(a.b)("h3",{id:"apolloofflineclient"},Object(a.b)("inlineCode",{parentName:"h3"},"ApolloOfflineClient")),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"ApolloOfflineClient")," extends the ",Object(a.b)("inlineCode",{parentName:"p"},"ApolloClient")," class. Check the ",Object(a.b)("a",Object(o.a)({parentName:"p"},{href:"https://www.apollographql.com/docs/react/v2.5/api/apollo-client/#apolloclient"}),Object(a.b)("inlineCode",{parentName:"a"},"ApolloClient")," constructor docs")," to see the options that can be passed."),Object(a.b)("p",null,"There are some additional options specific to ",Object(a.b)("inlineCode",{parentName:"p"},"ApolloOfflineClient"),"."),Object(a.b)("h4",{id:"networkstatus"},Object(a.b)("inlineCode",{parentName:"h4"},"networkStatus")),Object(a.b)("p",null,Object(a.b)("a",Object(o.a)({parentName:"p"},{href:"https://github.com/aerogear/offix/blob/master/packages/offix-offline/src/network/NetworkStatus.ts"}),"NetworkStatus")," Interface for detecting changes in network status. (Uses browser networking APIs by default)"),Object(a.b)("h4",{id:"offlinestorage"},Object(a.b)("inlineCode",{parentName:"h4"},"offlineStorage")),Object(a.b)("p",null,"The ",Object(a.b)("a",Object(o.a)({parentName:"p"},{href:"https://github.com/aerogear/offix/blob/master/packages/offix-scheduler/src/store/PersistentStore.ts"}),"PersistentStore")," you want your client to use for persisting offline operations in the offline queue (Uses IndexedDB by default)."),Object(a.b)("h4",{id:"cachestorage"},Object(a.b)("inlineCode",{parentName:"h4"},"cacheStorage")),Object(a.b)("p",null,"The ",Object(a.b)("a",Object(o.a)({parentName:"p"},{href:"https://github.com/aerogear/offix/blob/master/packages/offix-scheduler/src/store/PersistentStore.ts"}),"PersistentStore")," you want your client to use for persisting the Apollo Cache (Uses IndexedDB by default)."),Object(a.b)("h4",{id:"cachepersistor"},Object(a.b)("inlineCode",{parentName:"h4"},"cachePersistor")),Object(a.b)("p",null,"The ",Object(a.b)("a",Object(o.a)({parentName:"p"},{href:"https://github.com/apollographql/apollo-cache-persist#using-cachepersistor"}),"CachePersistor")," instance used by the client to persist the Apollo Cache across application restarts. Pass your own instance to override the one that is created by default."),Object(a.b)("p",null,"Example:"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),'import { ApolloOfflineClient, createDefaultCacheStorage } from "offix-client";\nimport { HttpLink } from "apollo-link-http";\nimport { InMemoryCache } from "apollo-cache-inmemory";\nimport { CachePersistor } from "apollo-cache-persist";\n\nconst link = new HttpLink({ uri: "http://example.com/graphql" });\nconst cache = new InMemoryCache()\n\nconst cachePersistor = new CachePersistor({\n  cache,\n  storage: createDefaultCacheStorage()\n})\n\nconst client = new ApolloOfflineClient({\n  cache,\n  cachePersistor,\n  link\n});\n')),Object(a.b)("p",null,"Note: if using TypeScript, you may need to declare the cachePersistor as follows ",Object(a.b)("inlineCode",{parentName:"p"},"const cachePersistor = new CachePersistor<object>(...options)")," or you may experience compiler errors."),Object(a.b)("p",null,"This example uses ",Object(a.b)("inlineCode",{parentName:"p"},"createDefaultCacheStorage")," to create the default IndexedDB based storage driver.\nThe storage can be swapped depending on the platform. For example ",Object(a.b)("inlineCode",{parentName:"p"},"window.localstorage")," in older browsers or ",Object(a.b)("inlineCode",{parentName:"p"},"AsyncStorage")," in ",Object(a.b)("a",Object(o.a)({parentName:"p"},{href:"/docs/0.13.0/react-native"}),"React Native"),"."),Object(a.b)("h4",{id:"offlinequeuelistener"},Object(a.b)("inlineCode",{parentName:"h4"},"offlineQueueListener")),Object(a.b)("p",null,Object(a.b)("a",Object(o.a)({parentName:"p"},{href:"/docs/0.13.0/offline-client#listening-for-events"}),"ApolloOfflineQueueListener")," User provided listener that contains a set of methods that are called when certain events occur in the queue."),Object(a.b)("h4",{id:"conflictprovider"},Object(a.b)("inlineCode",{parentName:"h4"},"conflictProvider")),Object(a.b)("p",null,Object(a.b)("a",Object(o.a)({parentName:"p"},{href:"/docs/0.13.0/conflict-server#implementing-custom-conflict-resolution"}),"ObjectState")," Interface that defines how object state is progressed. This interface needs to match state provider supplied on server."),Object(a.b)("h4",{id:"conflictstrategy"},Object(a.b)("inlineCode",{parentName:"h4"},"conflictStrategy")),Object(a.b)("p",null,Object(a.b)("a",Object(o.a)({parentName:"p"},{href:"https://github.com/aerogear/offix/blob/master/packages/offix-conflicts-client/src/strategies/ConflictResolutionStrategy.ts"}),"ConflictResolutionStrategy"),"interface used on the client to resolve conflicts. The ",Object(a.b)("a",Object(o.a)({parentName:"p"},{href:"https://github.com/aerogear/offix/blob/master/packages/offix-conflicts-client/src/strategies/strategies.ts"}),"default strategy")," merges client changes onto the server changes."),Object(a.b)("h4",{id:"mutationcacheupdates"},Object(a.b)("inlineCode",{parentName:"h4"},"mutationCacheUpdates")),Object(a.b)("p",null,Object(a.b)("a",Object(o.a)({parentName:"p"},{href:"/docs/0.13.0/offline-client#global-update-functions"}),"CacheUpdates")," Cache updates functions for your mutations. Argument allows to restore optimistic responses on application restarts."),Object(a.b)("h4",{id:"retryoptions"},Object(a.b)("inlineCode",{parentName:"h4"},"retryOptions")),Object(a.b)("p",null,"The options to configure how failed offline mutations are retried. See ",Object(a.b)("a",Object(o.a)({parentName:"p"},{href:"https://www.apollographql.com/docs/link/links/retry/"}),Object(a.b)("inlineCode",{parentName:"a"},"apollo-link-retry")),"."),Object(a.b)("h2",{id:"offix-client-boost"},"offix-client-boost"),Object(a.b)("h3",{id:"createclient"},Object(a.b)("inlineCode",{parentName:"h3"},"createClient")),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"createClient")," accepts all of the ",Object(a.b)("inlineCode",{parentName:"p"},"ApolloOfflineClient")," options described above as well as the ones listed below."),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"httpUrl")," (required) - The URL of the GraphQL server"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"wsUrl")," (required) - The URL of the websocket endpoint for subscriptions"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"cache")," - The Apollo ",Object(a.b)("a",Object(o.a)({parentName:"li"},{href:"https://www.apollographql.com/docs/react/caching/cache-configuration/"}),"InMemoryCache")," that will be used. (creates one by default)."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"authContextProvider")," - An object or an ",Object(a.b)("inlineCode",{parentName:"li"},"async")," function that returns an ",Object(a.b)("a",Object(o.a)({parentName:"li"},{href:"https://github.com/aerogear/offix/blob/master/packages/offix-client-boost/src/auth/AuthContexrProvider.ts"}),Object(a.b)("inlineCode",{parentName:"a"},"AuthContext"))," object with authentication headers that will be passed in GraphQL requests and in the ",Object(a.b)("inlineCode",{parentName:"li"},"connectionParams")," of websocket connections."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"fileUpload")," - If set to ",Object(a.b)("inlineCode",{parentName:"li"},"true"),", GraphGL file uploads will be enabled and supported. (default is ",Object(a.b)("inlineCode",{parentName:"li"},"false"),")"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"websocketClientOptions")," - Options for the websocket client used for subscriptions. See ",Object(a.b)("a",Object(o.a)({parentName:"li"},{href:"https://www.npmjs.com/package/subscriptions-transport-ws"}),"subscriptions-transport-ws"))))}p.isMDXComponent=!0},288:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return d}));var o=n(0),r=n.n(o);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=r.a.createContext({}),p=function(e){var t=r.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c({},t,{},e)),n},b=function(e){var t=p(e.components);return r.a.createElement(s.Provider,{value:t},e.children)},f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=Object(o.forwardRef)((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),b=p(n),u=o,d=b["".concat(i,".").concat(u)]||b[u]||f[u]||a;return n?r.a.createElement(d,c({ref:t},s,{components:n})):r.a.createElement(d,c({ref:t},s))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=u;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:o,i[1]=c;for(var s=2;s<a;s++)i[s]=n[s];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);