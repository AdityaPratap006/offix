(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{164:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return a})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return b}));var i=n(1),r=n(11),o=(n(0),n(288)),a={id:"client-configuration",title:"Client Configuration",sidebar_label:"Client Configuration"},l={id:"version-0.12.0/client-configuration",title:"Client Configuration",description:"## offix-client",source:"@site/versioned_docs/version-0.12.0/ref-configuration.md",permalink:"/docs/0.12.0/client-configuration",editUrl:"https://github.com/aerogear/graphback/edit/master/website/versioned_docs/version-0.12.0/ref-configuration.md",version:"0.12.0",sidebar_label:"Client Configuration",sidebar:"version-0.12.0/docs",previous:{title:"Getting Started",permalink:"/docs/0.12.0/getting-started"},next:{title:"Offline Support",permalink:"/docs/0.12.0/offline-client"}},c=[{value:"offix-client",id:"offix-client",children:[{value:"<code>ApolloOfflineClient</code>",id:"apolloofflineclient",children:[]}]},{value:"offix-client-boost",id:"offix-client-boost",children:[{value:"<code>createClient</code>",id:"createclient",children:[]}]}],s={rightToc:c};function b(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(i.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"offix-client"},"offix-client"),Object(o.b)("h3",{id:"apolloofflineclient"},Object(o.b)("inlineCode",{parentName:"h3"},"ApolloOfflineClient")),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"ApolloOfflineClient")," extends the ",Object(o.b)("inlineCode",{parentName:"p"},"ApolloClient")," class. Check the ",Object(o.b)("a",Object(i.a)({parentName:"p"},{href:"https://www.apollographql.com/docs/react/v2.5/api/apollo-client/#apolloclient"}),Object(o.b)("inlineCode",{parentName:"a"},"ApolloClient")," constructor docs")," to see the options that can be passed."),Object(o.b)("p",null,"There are some additional options specific to ",Object(o.b)("inlineCode",{parentName:"p"},"ApolloOfflineClient"),"."),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"cacheStorage")," - The ",Object(o.b)("a",Object(i.a)({parentName:"li"},{href:"https://github.com/aerogear/offix/blob/master/packages/offix-offline/src/offline/storage/PersistentStore.ts"}),"PersistentStore")," you want your client to use for persisting the Apollo Cache (Uses indexeddb by default)."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"offlineStorage")," - The ",Object(o.b)("a",Object(i.a)({parentName:"li"},{href:"https://github.com/aerogear/offix/blob/master/packages/offix-offline/src/offline/storage/PersistentStore.ts"}),"PersistentStore")," you want your client to use for persisting offline operations in the offline queue (Uses indexeddb by default)."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"networkStatus")," - ",Object(o.b)("a",Object(i.a)({parentName:"li"},{href:"https://github.com/aerogear/offix/blob/master/packages/offix-offline/src/offline/network/NetworkStatus.ts"}),"NetworkStatus")," Interface for detecting changes in network status. (Uses browser networking APIs by default)"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"offlineQueueListener")," - ",Object(o.b)("a",Object(i.a)({parentName:"li"},{href:"/docs/0.12.0/offline-client#listening-for-events"}),"ApolloOfflineQueueListener")," User provided listener that contains a set of methods that are called when certain events occur in the queue."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"conflictProvider")," - ",Object(o.b)("a",Object(i.a)({parentName:"li"},{href:"/docs/0.12.0/conflict-server#implementing-custom-conflict-resolution"}),"ObjectState")," Interface that defines how object state is progressed. This interface needs to match state provider supplied on server."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"conflictStrategy")," - ",Object(o.b)("a",Object(i.a)({parentName:"li"},{href:"https://github.com/aerogear/offix/blob/master/packages/offix-conflicts-client/src/strategies/ConflictResolutionStrategy.ts"}),"ConflictResolutionStrategy"),"interface used on the client to resolve conflicts. The ",Object(o.b)("a",Object(i.a)({parentName:"li"},{href:"https://github.com/aerogear/offix/blob/master/packages/offix-conflicts-client/src/strategies/strategies.ts"}),"default strategy")," merges client changes onto the server changes."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"mutationCacheUpdates")," - ",Object(o.b)("a",Object(i.a)({parentName:"li"},{href:"/docs/0.12.0/offline-client#global-update-functions"}),"CacheUpdates")," Cache updates functions for your mutations. Argument allows to restore optimistic responses on application restarts."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"retryOptions")," - The options to configure how failed offline mutations are retried. See ",Object(o.b)("a",Object(i.a)({parentName:"li"},{href:"https://www.apollographql.com/docs/link/links/retry/"}),Object(o.b)("inlineCode",{parentName:"a"},"apollo-link-retry")),".")),Object(o.b)("h2",{id:"offix-client-boost"},"offix-client-boost"),Object(o.b)("h3",{id:"createclient"},Object(o.b)("inlineCode",{parentName:"h3"},"createClient")),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"createClient")," accepts all of the ",Object(o.b)("inlineCode",{parentName:"p"},"ApolloOfflineClient")," options described above as well as the ones listed below."),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"httpUrl")," (required) - The URL of the GraphQL server"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"wsUrl")," (required) - The URL of the websocket endpoint for subscriptions"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"cache")," - The Apollo ",Object(o.b)("a",Object(i.a)({parentName:"li"},{href:"https://www.apollographql.com/docs/react/caching/cache-configuration/"}),"InMemoryCache")," that will be used. (creates one by default)."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"authContextProvider")," - An object or an ",Object(o.b)("inlineCode",{parentName:"li"},"async")," function that returns an ",Object(o.b)("a",Object(i.a)({parentName:"li"},{href:"https://github.com/aerogear/offix/blob/master/packages/offix-client-boost/src/auth/AuthContexrProvider.ts"}),Object(o.b)("inlineCode",{parentName:"a"},"AuthContext"))," object with authentication headers that will be passed in GraphQL requests and in the ",Object(o.b)("inlineCode",{parentName:"li"},"connectionParams")," of websocket connections."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"fileUpload")," - If set to ",Object(o.b)("inlineCode",{parentName:"li"},"true"),", GraphGL file uploads will be enabled and supported. (default is ",Object(o.b)("inlineCode",{parentName:"li"},"false"),")"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"websocketClientOptions")," - Options for the websocket client used for subscriptions. See ",Object(o.b)("a",Object(i.a)({parentName:"li"},{href:"https://www.npmjs.com/package/subscriptions-transport-ws"}),"subscriptions-transport-ws"))))}b.isMDXComponent=!0},288:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return d}));var i=n(0),r=n.n(i);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=r.a.createContext({}),b=function(e){var t=r.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l({},t,{},e)),n},p=function(e){var t=b(e.components);return r.a.createElement(s.Provider,{value:t},e.children)},f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=Object(i.forwardRef)((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,a=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),p=b(n),u=i,d=p["".concat(a,".").concat(u)]||p[u]||f[u]||o;return n?r.a.createElement(d,l({ref:t},s,{components:n})):r.a.createElement(d,l({ref:t},s))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=u;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:i,a[1]=l;for(var s=2;s<o;s++)a[s]=n[s];return r.a.createElement.apply(null,a)}return r.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);