(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{134:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return m}));var a=n(0),r=n.n(a);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=r.a.createContext({}),l=function(e){var t=r.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=l(e.components);return r.a.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},b=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,i=e.parentName,c=u(e,["components","mdxType","originalType","parentName"]),p=l(n),b=a,m=p["".concat(i,".").concat(b)]||p[b]||d[b]||s;return n?r.a.createElement(m,o(o({ref:t},c),{},{components:n})):r.a.createElement(m,o({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,i=new Array(s);i[0]=b;var o={};for(var u in t)hasOwnProperty.call(t,u)&&(o[u]=t[u]);o.originalType=e,o.mdxType="string"==typeof e?e:a,i[1]=o;for(var c=2;c<s;c++)i[c]=n[c];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},94:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return o})),n.d(t,"rightToc",(function(){return u})),n.d(t,"default",(function(){return l}));var a=n(2),r=n(6),s=(n(0),n(134)),i={id:"react",title:"React - using Datastore Hooks",sidebar_label:"React"},o={unversionedId:"datastore/react",id:"datastore/react",isDocsHomePage:!1,title:"React - using Datastore Hooks",description:"Offix Datastore provides react hooks for CRUD operations and subscription.",source:"@site/../docs/datastore/react.md",permalink:"/docs/next/datastore/react",editUrl:"https://github.com/aerogear/offix/edit/master/website/../docs/datastore/react.md",version:"next",sidebar_label:"React",sidebar:"docs",previous:{title:"Subscribing to Changes",permalink:"/docs/next/datastore/subscriptions"},next:{title:"Datastore CLI",permalink:"/docs/next/datastore/cli"}},u=[{value:"useSave",id:"usesave",children:[]},{value:"useQuery",id:"usequery",children:[]},{value:"useLazyQuery",id:"uselazyquery",children:[]},{value:"useUpdate",id:"useupdate",children:[]},{value:"useRemove",id:"useremove",children:[]},{value:"useSubscription",id:"usesubscription",children:[]}],c={rightToc:u};function l(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(s.b)("wrapper",Object(a.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(s.b)("p",null,"Offix Datastore provides react hooks for CRUD operations and subscription."),Object(s.b)("p",null,"For a quick start see ",Object(s.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/aerogear/offix/tree/master/examples/react-datastore"}),"sample react app"),"."),Object(s.b)("h2",{id:"usesave"},"useSave"),Object(s.b)("p",null,"The ",Object(s.b)("inlineCode",{parentName:"p"},"useSave")," hook provides a lazy ",Object(s.b)("inlineCode",{parentName:"p"},"save")," function,\na loading indicator ",Object(s.b)("inlineCode",{parentName:"p"},"isLoading")," and an ",Object(s.b)("inlineCode",{parentName:"p"},"error")," state variable.\nThe ",Object(s.b)("inlineCode",{parentName:"p"},"save")," function accepts the input and returns a promise of the save result."),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),'import { useSave } from "offix-datastore";\n\n\nconst AddTask = () => {\n    const [taskDetails, setTaskDetails] = useState({\n        title: "", description: "", numberOfDaysLeft: 0\n    });\n    const { isLoading, error, save } = useSave(TaskModel);\n\n    async function handleSubmit(e) {\n        e.preventDefault();\n        const result = await save(taskDetails);\n        setTaskDetails(result);\n    }\n\n    const handleOnChange = (e) => {\n        const { name, value } = e.target;\n        setTaskDetails((d) => ({ ...d, [name]: value }));\n    }\n\n    const { title, description, numberOfDaysLeft } = taskDetails;\n    return (\n        {(error ? <div>{error.message}</div>)}\n        <form onSubmit={handleSubmit}>\n            <input name="title" value={title} onChange={handleOnChange} />\n            <input name="description" value={description} onChange={handleOnChange} />\n            <input name="numberOfDaysLeft" type="number" value={numberOfDaysLeft} onChange={handleOnChange} />\n            <button type="submit">Submit</button>\n        </form>\n    )\n}\n')),Object(s.b)("h2",{id:"usequery"},"useQuery"),Object(s.b)("p",null,"You can query using this hook, with or without filters or id. When no filter or id is supplied\nall the data is returned."),Object(s.b)("p",null,"Query using a filter;"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),'import { useQuery } from "offix-datastore";\n\nconst Tasks = () => {\n    const [filter, setFilter] = useState();\n    const { isLoading, error, data: tasks } = useQuery(TaskModel, filter);\n\n    if (isLoading) return <div>Loading ....</div>\n    if (error) return <div>{error.message}</div>\n\n    return (\n        <TaskFilterForm onFilterChanged={(filter) => setFilter(filter)} />\n        {tasks.map((task) => <Task task={task} />)}\n    )\n}\n')),Object(s.b)("p",null,"Query by id;"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),'const documentId = "";\nconst { isLoading, error, data: tasks } = useQuery(TaskModel, documentId);\n')),Object(s.b)("p",null,"You can also subscribe to more changes using the ",Object(s.b)("inlineCode",{parentName:"p"},"subscribeToMore")," function"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"const { isLoading, error, data: tasks, subscribeToMore } = useQuery(TaskModel, filter);\nuseEffect(() => {\n    const subscription = subscribeToMore(CRUDEvents.ADD, (newData) => {\n        if (!tasks) return [newData];\n        return [...tasks, newData];\n    });\n    return () => subscription.unsubscribe();\n}, []);\n")),Object(s.b)("h2",{id:"uselazyquery"},"useLazyQuery"),Object(s.b)("p",null,"This hook provides a lazy ",Object(s.b)("inlineCode",{parentName:"p"},"query")," function. The ",Object(s.b)("inlineCode",{parentName:"p"},"query")," function accepts\na filter, an id or nothing, in which case, all documents are returned. "),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),'import { useLazyQuery } from "offix-datastore";\n\nconst Tasks = () => {\n    const { isLoading, error, data: tasks, query } = useLazyQuery(TaskModel);\n\n    useEffect(() => query(), []);\n\n    if (isLoading) return <div>Loading ....</div>\n    if (error) return <div>{error.message}</div>\n\n    return (\n        <TaskFilterForm onFilterChanged={(filter) => query(filter)} />\n        {tasks.map((task) => <Task task={task} />)}\n    )\n}\n')),Object(s.b)("p",null,"The ",Object(s.b)("inlineCode",{parentName:"p"},"query")," function also returns a ",Object(s.b)("inlineCode",{parentName:"p"},"subscribeToMore")," function\nthat you can use to subscribe to changes for that query. "),Object(s.b)("h2",{id:"useupdate"},"useUpdate"),Object(s.b)("p",null,"The ",Object(s.b)("inlineCode",{parentName:"p"},"useUpdate")," works just like the ",Object(s.b)("inlineCode",{parentName:"p"},"useSave")," hook.\nThe only difference is that the input to the ",Object(s.b)("inlineCode",{parentName:"p"},"update")," function must have its primary key defined."),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),'import { useUpdate } from "offix-datastore";\n\nconst EditTask = ({ task }) => {\n    const [taskDetails, setTaskDetails] = useState(task);\n    const { isLoading, error, update } = useUpdate(TaskModel);\n\n    async function handleSubmit(e) {\n        e.preventDefault();\n        const result = await update(taskDetails);\n        setTaskDetails(result);\n    }\n\n    const handleOnChange = (e) => {\n        const { name, value } = e.target;\n        setTaskDetails((d) => ({ ...d, [name]: value }));\n    }\n\n    const { title, description, numberOfDaysLeft } = taskDetails;\n    return (\n        {(error ? <div>{error.message}</div>)}\n        <form onSubmit={handleSubmit}>\n            <input name="title" value={title} onChange={handleOnChange} />\n            <input name="description" value={description} onChange={handleOnChange} />\n            <input name="numberOfDaysLeft" type="number" value={numberOfDaysLeft} onChange={handleOnChange} />\n            <button type="submit">Submit</button>\n        </form>\n    )\n}\n')),Object(s.b)("p",null,"The ",Object(s.b)("inlineCode",{parentName:"p"},"update")," function accepts an optional ",Object(s.b)("inlineCode",{parentName:"p"},"upsert")," parameter(which is ",Object(s.b)("inlineCode",{parentName:"p"},"false")," by default) that can be used to\nperform a ",Object(s.b)("inlineCode",{parentName:"p"},"saveOrUpdate")," operation instead of an ",Object(s.b)("inlineCode",{parentName:"p"},"update")," operation."),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-Javascript"}),"async function handleSubmit(e) {\n    e.preventDefault();\n    const result = await update(taskDetails, true);\n    setTaskDetails(result);\n}\n")),Object(s.b)("h2",{id:"useremove"},"useRemove"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),'import { useRemove } from "offix-datastore";\n\nconst Task = ({ task }) => {\n    const { isLoading, remove } = useRemove(TaskModel);\n    \n    const deleteTask = async () => {\n        await remove(task);\n        ...\n    }\n    \n    return ...\n}\n')),Object(s.b)("h2",{id:"usesubscription"},"useSubscription"),Object(s.b)("p",null,"You can subscribe to specific events and receive changes data using this hook.\nWe listen for updates to the task and render them. The ",Object(s.b)("inlineCode",{parentName:"p"},"data")," returned\nby ",Object(s.b)("inlineCode",{parentName:"p"},"useSubscription")," is the data carried by the change event."),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"const Task = ({ task }) => {\n    // Listen for updates on this task\n    const { data } = useSubscription(TaskModel, CRUDEvents.UPDATE, task);\n    task = data[0] || task; // data is undefined when no events have been fired\n\n    return <div>{task.title}</div>\n}\n")))}l.isMDXComponent=!0}}]);